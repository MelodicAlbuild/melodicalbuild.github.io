"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[625],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=i,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2,title:"Reading Data"},r="Reading Data",l={unversionedId:"database-interaction/reading-data",id:"database-interaction/reading-data",title:"Reading Data",description:"Reading Data out of the MongoDB Instance is pretty easy, Taking what you learned in the basics of interaction Links to which can be found here you can read any data you see fit out of the collection.",source:"@site/docs/database-interaction/reading-data.md",sourceDirName:"database-interaction",slug:"/database-interaction/reading-data",permalink:"/database-interaction/reading-data",draft:!1,editUrl:"https://github.com/MelodicAlbuild/melodicalbuild.github.io/website/docs/database-interaction/reading-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Reading Data"},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/database-interaction/basics"},next:{title:"Creating Data",permalink:"/database-interaction/creating-data"}},s={},d=[{value:"BsonDocument",id:"bsondocument",level:2},{value:"BsonDocument Filters",id:"bsondocument-filters",level:3},{value:"BsonDocument Builder",id:"bsondocument-builder",level:4},{value:"BsonDocument Filters cont.",id:"bsondocument-filters-cont",level:3},{value:"Reading Documents",id:"reading-documents",level:2},{value:"All Documents",id:"all-documents",level:3},{value:"A Single Document",id:"a-single-document",level:3},{value:"Serialization",id:"serialization",level:4}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"reading-data"},"Reading Data"),(0,i.kt)("p",null,"Reading Data out of the MongoDB Instance is pretty easy, Taking what you learned in the basics of interaction ",(0,i.kt)("em",{parentName:"p"},"Links to which can be found")," ",(0,i.kt)("a",{parentName:"p",href:"/database-interaction/basics"},"here")," you can read any data you see fit out of the collection."),(0,i.kt)("h2",{id:"bsondocument"},"BsonDocument"),(0,i.kt)("p",null,"All of the MongoDB data is stored in a BsonDocument format. Luckily I made a lovely conversion method you can use, That I will demonstrate below. Import ",(0,i.kt)("inlineCode",{parentName:"p"},"Cap.lib.classes")," to gain access to these implementations."),(0,i.kt)("h3",{id:"bsondocument-filters"},"BsonDocument Filters"),(0,i.kt)("p",null,"Making Filters is slightly more complicated than I intended however, I will try to explain it the best I can here."),(0,i.kt)("h4",{id:"bsondocument-builder"},"BsonDocument Builder"),(0,i.kt)("p",null,"The Builder is the Core of Filters and Updates, To use the BsonDocument Builder the keywords are ",(0,i.kt)("inlineCode",{parentName:"p"},"Builders<BsonDocument>")," and will expand from there."),(0,i.kt)("h3",{id:"bsondocument-filters-cont"},"BsonDocument Filters cont."),(0,i.kt)("p",null,"The Builder in hand, a filter is as simple as ",(0,i.kt)("inlineCode",{parentName:"p"},'Builders<BsonDocument>.Filter.Eq("field name", value);')," where Eq stands for Equals. There are a million other operations I don't feel like listing out but they are options. Just replace the field name with what field you want to check ",(0,i.kt)("em",{parentName:"p"},"The MongoDB name")," and fill the value with the comparitor."),(0,i.kt)("h2",{id:"reading-documents"},"Reading Documents"),(0,i.kt)("h3",{id:"all-documents"},"All Documents"),(0,i.kt)("p",null,"To read all the Documents in a collection, you're gonna need a couple of tools, However it has been heavilty simplified for you. The method ",(0,i.kt)("inlineCode",{parentName:"p"},"GetAllDocumentsInCollection(IMongoCollection<BsonDocument> collection)"),". You can iterate over this method with the ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," keyword and you have every document in the collection. Keep in mind they are still serialized as ",(0,i.kt)("inlineCode",{parentName:"p"},"BsonDocument"),"s."),(0,i.kt)("h3",{id:"a-single-document"},"A Single Document"),(0,i.kt)("p",null,"To read a single document, There is a simple method again, ",(0,i.kt)("inlineCode",{parentName:"p"},"GetDocumentInCollection(IMongoCollection<BsonDocument> collection, FilterDefinition<BsonDocument> filter)")," That filter is the same as the filter discussed above in ",(0,i.kt)("a",{parentName:"p",href:"#bsondocument-filters"},"this section"),". This Method Returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"BsonDocument")," However it can be easily stripped."),(0,i.kt)("h4",{id:"serialization"},"Serialization"),(0,i.kt)("p",null,"To pull apart the BsonDocument, We need to convert it to a C# class. Luckily I made those for you ",(0,i.kt)("inlineCode",{parentName:"p"},"Cap.lib.classes"),". To pull a BsonDocument apart use the method ",(0,i.kt)("inlineCode",{parentName:"p"},"BsonSerializer.Deserialize<ClassName>(BsonDocument document);")," The class name chart can be found below:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Collection"),(0,i.kt)("th",{parentName:"tr",align:null},"C# Class"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Guilds"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.Guild")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Users"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.User")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Xp"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.XP")))),(0,i.kt)("p",null,"Now you can interact with this data."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Keep in mind, Changing this data does not affect the database data"))))}u.isMDXComponent=!0}}]);