"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[435],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(a),p=i,h=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function p(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},870:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:3,title:"Creating Data"},o="Creating Data",l={unversionedId:"database-interaction/creating-data",id:"database-interaction/creating-data",title:"Creating Data",description:"Creating Data is extrememly painless for this. I managed to simplify it quite a bit.",source:"@site/docs/database-interaction/creating-data.md",sourceDirName:"database-interaction",slug:"/database-interaction/creating-data",permalink:"/database-interaction/creating-data",draft:!1,editUrl:"https://github.com/MelodicAlbuild/melodicalbuild.github.io/website/docs/database-interaction/creating-data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Creating Data"},sidebar:"tutorialSidebar",previous:{title:"Reading Data",permalink:"/database-interaction/reading-data"},next:{title:"Updating Data",permalink:"/database-interaction/updating-data"}},s={},d=[{value:"Generating Data",id:"generating-data",level:2},{value:"Creating the Class",id:"creating-the-class",level:3},{value:"Inputting Data",id:"inputting-data",level:2},{value:"Generating a Blank Document",id:"generating-a-blank-document",level:3},{value:"Writing to this Document",id:"writing-to-this-document",level:3},{value:"Inserting the Data into the Database",id:"inserting-the-data-into-the-database",level:3},{value:"Full Example",id:"full-example",level:2}],c={toc:d};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-data"},"Creating Data"),(0,i.kt)("p",null,"Creating Data is extrememly painless for this. I managed to simplify it quite a bit."),(0,i.kt)("h2",{id:"generating-data"},"Generating Data"),(0,i.kt)("p",null,"To Generate your data in a format that can be inserted into the database we need to make it out of the 3 core classes for the Database. ",(0,i.kt)("em",{parentName:"p"},"Once more, Here's the chart")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Collection"),(0,i.kt)("th",{parentName:"tr",align:null},"C# Class"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Guilds"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.Guild")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Users"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.User")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Xp"),(0,i.kt)("td",{parentName:"tr",align:null},"Cap.lib.classes.XP")))),(0,i.kt)("p",null,"To input this data we need to do something a little odd, but I promise it will make sense in a moment."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For the sake of this documentation, I will only be doing the Cap.lib.classes.User class. The others work in roughly the same way, just different variables"))),(0,i.kt)("h3",{id:"creating-the-class"},"Creating the Class"),(0,i.kt)("p",null,"Class creation is the same as always ",(0,i.kt)("inlineCode",{parentName:"p"},"User user = new User()")," note the missing semi-colon. This is where we hit a little snag with C# that allows me to save serialization time. To continue on in the creation we have to modify this data a little, not through a constructor and the parenthesis however, through brackets! Your initial statement should now look like this ",(0,i.kt)("inlineCode",{parentName:"p"},"User user = new User() {};")," Now just fill in the Variables in the Brackets and you have a filled in class! ",(0,i.kt)("em",{parentName:"p"},"Example Below")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"user as SocketGuildUser\n\nList<Role> roleArray = new List<Role>();\nforeach (var role in user.Roles)\n{\n    roleArray.Add(new Role() { CatchAll = null, id = (long)role.Id, name = role.Name});\n}\n\nUser userdata = new User() { _id = new BsonObjectId(new ObjectId()), CatchAll = null, discriminator = user.Discriminator, name = user.DisplayName, roles = roleArray.ToArray(), joinedAt = user.JoinedAt.ToString()!, isModerator = user.Roles.Contains(IGuild.GetRole(12345678910111213)), userId = (long)user.Id};\n")),(0,i.kt)("h2",{id:"inputting-data"},"Inputting Data"),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Updating Data is COMPLETELY DIFFERENT. Do not attempt to update a document with this method."))),(0,i.kt)("p",null,"The method to input data is ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateDocumentInCollection(IMongoCollection<BsonDocument> collection, BsonDocument doc)"),". Now you may notice that something isn't quite right here... And you'd be correct. The data we made is of the User class, Not the BsonDocument class. This is a simple fix, All we need is a little finesse."),(0,i.kt)("h3",{id:"generating-a-blank-document"},"Generating a Blank Document"),(0,i.kt)("p",null,"First off we need a blank document, To make one, just instantiate a BsonDocument. ",(0,i.kt)("inlineCode",{parentName:"p"},"BsonDocument document = new BsonDocument();")),(0,i.kt)("h3",{id:"writing-to-this-document"},"Writing to this Document"),(0,i.kt)("p",null,"Now we need to convert the ",(0,i.kt)("inlineCode",{parentName:"p"},"userdata")," to a BsonDocument ",(0,i.kt)("em",{parentName:"p"},"Hopefully the one we just made")," Luckily theres a method for that.\n",(0,i.kt)("inlineCode",{parentName:"p"},"BsonSerializer.Serialize(new BsonDocumentWriter(BsonDocument document), Type data);")),(0,i.kt)("h3",{id:"inserting-the-data-into-the-database"},"Inserting the Data into the Database"),(0,i.kt)("p",null,"Now that we have converted the User class into a BsonDocument, We can insert the data with the method above. Once that's run, Boom, It's in your database!"),(0,i.kt)("h2",{id:"full-example"},"Full Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'user as SocketGuildUser\n\nIMongoDatabase database = DatabaseController._instance.GetDatabase("test");\nIMongoCollection<BsonDocument> collection = DatabaseController._instance.GetCollection(database, "base");\n\nList<Role> roleArray = new List<Role>();\nforeach (var role in user.Roles)\n{\n    roleArray.Add(new Role() { CatchAll = null, id = (long)role.Id, name = role.Name});\n}\n\nUser userdata = new User() { _id = new BsonObjectId(new ObjectId()), CatchAll = null, discriminator = user.Discriminator, name = user.DisplayName, roles = roleArray.ToArray(), joinedAt = user.JoinedAt.ToString()!, isModerator = user.Roles.Contains(IGuild.GetRole(12345678910111213)), userId = (long)user.Id};\n\nBsonDocument doc = new BsonDocument();\n\nBsonSerializer.Serialize(new BsonDocumentWriter(doc), userdata);\n\nDatabaseController._instance.CreateDocumentInCollection(collection, doc);\n')))}m.isMDXComponent=!0}}]);